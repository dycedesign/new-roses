#!/usr/bin/env bash
#
# author: daniel neemann (@zzzeyez)
#
# sets wallpaper or `wal` colorscheme
# from unsplash.com images
# or colorlovers.com palettes
#
# requires `wal`, `imagemagick` and `jq`

# you can change these if you want
config="${HOME}/.config/new-roses"

# just don't change these
lightmode=""
background=""

getconfig() {
	# check for config
	if [[ -e $config ]]
	then
		source "$config"
	fi
	# check for defaults
	if [[ -z "$cache" ]] ; then
		cache="${HOME}/.cache/new-roses"
	fi
	if [[ -z "$defaultkeyword" ]] ; then 
		defaultkeyword="flowers"
	fi
	if [[ -z "$defaultbgcolor" ]] ; then 
		defaultbgcolor="222222"
	fi	
	# these can be defined now that setup() checked for config
	wallpaper="$cache/wallpaper.png"
	unsplashartistfile="$cache/wallpaperartist"
	colorloversbadge="$cache/colorloversbadge.png"
	colorloverswal="$cache/colorloverswal.png"
	if [ ! -d "$cache" ]
	then
		mkdir "$cache"
		touch "$unsplashartistfile"
	fi
}

createconfig() {
	echo "unsplashapi=\"$1\"" > "$config" &&
	echo "cache=\"${HOME}/.cache/new-roses\"" >> "$config"
	echo "defaultkeyword=\"flowers\"" >> "$config"
	echo "defaultbgcolor=\"222222\"" >> "$config"
	echo "# in case you need to execute something after new-roses:" >> "$config"
	echo "executeafter=" >> "$config"
	echo "# like maybe \"feh --bg-fill\":" >> "$config"
	echo "wallpapermethod=" >> "$config"
	echo "config file $config created with Unsplash API key of $1"
}

setup() {
	# if no arguments are given then run `unsplash` and `colorlovers`
	if [ -z "$unsplashon" ] && [ -z "$colorloverson" ] && [ -z "$savefile" ] && [ -z "$wallpaperfile" ]
	then
		unsplashon="true"
		colorloverson="true"
	fi
	# if no background color is supplied, do default
	if [[ -z $background ]] && [[ -z $lightmode ]] && [[ -z $wallpaperonly ]] 
	then
		background="-b $defaultbgcolor"
	fi
	if [[ $unsplashon ]]
		then
		if [[ -z "$unsplashapi" ]]
		then
			unset unsplashon
			apimissing="true"
		fi
	fi	
}

getapi() {
	# grab a random number to select from top results
	entry="$((RANDOM%20))"
	# this performs the same regardless of if search is on or not
	if [[ $colorloverson ]]
	then
		if [[ -z $wallpaperonly ]]
		then
			# grab json for colorlovers
			colorloversurl="http://www.colourlovers.com/api/palettes/top&format=json&numResults=20&keywords=$keyword"
			colorloversjson=$(curl -s "$colorloversurl")
			colorloversimage=$(echo "$colorloversjson" | jq ".[$entry] | .imageUrl" | tr -d '"')	
			colorloversusername=$(echo "$colorloversjson" | jq ".[$entry] | .userName" | tr -d '"')
			colorloverstitle=$(echo "$colorloversjson" | jq ".[$entry] | .title" | tr -d '"')
		fi
	fi
	if [[ $unsplashon ]]
	then
		if [[ $searchon ]]
		then
			unsplashurl="https://api.unsplash.com/search/photos?client_id=$unsplashapi&query=$keyword&per_page=20"
			searchjson=$(curl -s "$unsplashurl")
			image="$(echo "$searchjson" | \
			jq "{results} | .[] | .[$entry] | {urls} | .[] | {raw} | .[]" | tr -d '"')&w=1400&dpi=2"
			username="$(echo "$searchjson" | \
			jq ".results | .[$entry] .user .name" | tr -d '"')"
			userscreenname="$(echo "$searchjson" | \
			jq ".results | .[$entry] .user .username" | tr -d '"')"
			userurl="$(echo "$searchjson" | \
			jq ".results | .[$entry] .user .links .html" | tr -d '"')"
			photourl="$(echo "$searchjson" | \
			jq ".results | .[$entry] .links .html" | tr -d '"')"
		else
			unsplashurl="https://api.unsplash.com/photos?client_id=$unsplashapi&featured&per_page=20"
			featuredjson=$(curl -s "$unsplashurl")
			image="$(echo "$featuredjson" | \
			jq ".[$entry] | .urls | .full" | tr -d '"')"
			username="$(echo "$featuredjson" | \
			jq ".[$entry] .user .name" | tr -d '"')"
			userscreenname="$(echo "$featuredjson" | \
			jq ".[$entry] .user .username" | tr -d '"')"
			userurl="$(echo "$featuredjson" | \
			jq ".[$entry] .user .links .html" | tr -d '"')?utm_source=new-roses&utm_medium=referral"
			photourl="$(echo "$featuredjson" | \
			jq ".[$entry] .links .html" | tr -d '"')?utm_source=new-roses&utm_medium=referral"
		fi
		echo "$username" > "$unsplashartistfile"
	fi
}

defaults() {
	keyword="$1"
	searchon="true"
}

rmcache() {
	if [[ -z $wallpaperonly ]]
	then
		walcache="${cache////_}"
		walcache="${HOME}/.cache/wal/schemes/${walcache//./_}"
		rm -rf "$walcache"*
	fi
}

setwal() {
	if [[ $colorloverson ]] && [[ -z $wallpaperonly ]]
	then
		# make palette more dynamic by adding a gradient to `wal` source image
		convert "$colorloversimage" "$colorloversbadge"
		convert -size 228x161 gradient: /tmp/gradient.png
		composite /tmp/gradient.png -compose Soft_light "$colorloversbadge" "$colorloverswal"
		# apply `wal`
		wal -i "$colorloverswal" -q -n $background $lightmode 
		# delete dummy wallpaper image
		rm "$colorloverswal"
	fi
	if [[ $unsplashon ]]
	then
		convert "$image" "$wallpaper"
		if [[ -z $wallpaperonly ]] && [[ -z $colorloverson ]]
		then
			wal -i "$wallpaper" -q $background $lightmode
		fi
	fi
	if [[ $wallpaperfile ]]
	then
		convert "$wallpaperfile" "$wallpaper"
		if [[ -z $wallpaperonly ]]	
		then
			wal -i "$wallpaper" -q $background $lightmode 
		fi
	fi
}

macwallpaper() {
	METHOD=$(sw_vers -productVersion | awk -F'.' '{ if ($1 < 10 || $2 < 9) \
	{ print "osascript" } else{ print "sqlite3"  } }')
	case $METHOD in
	osascript)
		osascript -e "tell application \"Finder\" to set desktop picture \
		to POSIX file \"${1}\""
	;;
	sqlite3)
		current_path=$(sqlite3 -noheader -batch \
		${HOME}/Library/Application\ Support/Dock/desktoppicture.db \
		'select value from data limit 1')
		if [[ "$current_path" != "$1" ]]; then
		sqlite3 ${HOME}/Library/Application\ Support/Dock/desktoppicture.db \
		"update data set value = '${1}'" && killall Dock
	fi
	;;
	*)
		echo "error setting wallpaper" && exit 1
	;;
	esac						
}

setwallpaper() {
	if [[ $unsplashon ]] || [[ $wallpaperfile ]]
	then
		if [[ $wallpaperonly ]] || [[ $colorloverson ]]
		then
			if [[ $wallpapermethod ]]
			then
				bash "$wallpapermethod" "$wallpaper"
			else
				de="${XDG_CURRENT_DESKTOP}"
				os="$(uname)"
				# Fallback to using xprop.
				[[ -z "$de" ]] && type -p xprop >/dev/null 2>&1 && \
				de="$(xprop -root | awk '/KDE_SESSION_VERSION|^_MUFFIN|xfce4|xfce5/')"
				case "$de" in
					*"MUFFIN"* | *"Cinnamon"*) gsettings set org.cinnamon.desktop.background picture-uri "file://${wallpaper}" ;;
					*"MATE"*) gsettings set org.mate.background picture-filename "$wallpaper" ;;
					*"GNOME"*) gsettings set org.gnome.desktop.background picture-uri "file://${wallpaper}" ;;
					*"XFCE"*)
						xfconf-query --channel xfce4-desktop --property /backdrop/screen0/monitor0/image-path --set "$wallpaper" 2>/dev/null
						xfconf-query --channel xfce4-desktop --property /backdrop/screen0/monitor0/workspace0/last-image --set "$wallpaper" 2>/dev/null
					;;
					*)
						if [[ "$os" == "Darwin" ]]; then
							# `osascript` prevents using same file consecutively
							if [[ ! -e "$cache/black.png" ]] ; then
								convert -size 5x5 xc:"#000000" "$cache/black.png" 
							fi
							macwallpaper "$cache/black.png"
							macwallpaper "$wallpaper"
						elif type -p feh >/dev/null; then
							feh --bg-fill "$wallpaper"
						elif type -p nitrogen >/dev/null; then
							nitrogen --set-zoom-fill "$wallpaper"
						elif type -p bgs >/dev/null; then
							bgs "$wallpaper"
						elif type -p hsetroot >/dev/null; then
							hsetroot -fill "$wallpaper"
						elif type -p habak >/dev/null; then
							habak -mS "$wallpaper"
						else
							gsettings set org.gnome.desktop.background picture-uri "file://${wallpaper}"
						fi
					;;
				esac
			fi
		fi
	fi
}


executeafter() {
	if [[ "$executeafter" ]]
	then
		bash "$executeafter"
	fi
}

notify() {
	if [[ $notifyon ]]
	then
		if [[ $unsplashon ]]
		then
			notify-send -i "$wallpaper" -m "photo by $username ($userscreenname)"
		elif [[ $wallpaperfile ]]
		then
			notify-send -i "$wallpaper" -m "wallpaper set as $wallpaperfile"
		elif [[ $colorlovers ]]
		then
			notify-send -m "color palette: $colorloverstitle by $colorloversusername"
		fi
	fi
}

credits() {
	if [[ -z $quietmodeon ]] 
	then
		# build the color bars
		BAR="███" && RST="\e[0m"
		RED="\e[31m" && REDBAR="$RED$BAR$RST"
		GRN="\e[32m" && GRNBAR="$GRN$BAR$RST"
		YLW="\e[33m" && YLWBAR="$YLW$BAR$RST"
		BLU="\e[34m" && BLUBAR="$BLU$BAR$RST"
		PUR="\e[35m" && PURBAR="$PUR$BAR$RST" 
		CYN="\e[36m" && CYNBAR="$CYN$BAR$RST"
		if [[ $unsplashon ]] && [[ -z $apimissing ]]
		then
			printf "%b" "$REDBAR \n"
			printf "%b" "$GRNBAR photo by $username ($userscreenname) \n"
			printf "%b" "$YLWBAR $userurl \n"
			printf "%b" "$BLUBAR courtesy of Unsplash\n"
			printf "%b" "$PURBAR \n"
		fi
		if [[ $colorloverson ]] && [[ -z $apimissing ]]
		then
			if [[ -z $unsplashon ]]
			then
				printf "%b" "$REDBAR \n"
			fi
			printf "%b" "$GRNBAR color palette set as: \n"
			printf "%b" "$YLWBAR $colorloverstitle by $colorloversusername \n"
			printf "%b" "$BLUBAR courtesy of Colorlovers\n"
			printf "%b" "$PURBAR \n"	
		fi
		if [[ $keyword ]]
		then
			printf "%b" "$REDBAR search term: $keyword \n"
			printf "%b" "$GRNBAR \n"
		fi
		if [[ $wallpaperfile ]]
		then
			printf "%b" "$REDBAR \n"
			printf "%b" "$GRNBAR wallpaper set as $(basename $wallpaperfile) \n"
			printf "%b" "$BLUBAR \n"
		fi
		if [[ $variableson ]]
		then
			printf "%b" "$REDBAR image url: $image \n"
			printf "%b" "$GRNBAR unsplash api key: $unsplashapi \n"
			printf "%b" "$YLWBAR unsplash api url: $unsplashurl \n"
			printf "%b" "$BLUBAR search keyword: $keyword \n"
			printf "%b" "$PURBAR entry number: $entry \n"
			printf "%b" "$CYNBAR photo page: $photourl \n"
			printf "%b" "$PURBAR author: $username ( $userscreenname ) \n"
			printf "%b" "$BLUBAR author's profile: $userurl \n"
			printf "%b" "$YLWBAR photo supplied by https://unsplash.com/ \n"
			printf "%b" "$GRNBAR colorlovers api url: $colorloversurl \n"
			printf "%b" "$REDBAR colorlovers image url: $colorloversimage \n"
			printf "%b" "$GRNBAR colorlovers title: $colorloverstitle \n"
		fi
		if [[ $apimissing ]]
		then
			printf "%b" "$REDBAR wallpaper functions require API key: \n"
			printf "%b" "$GRNBAR https://unsplash.com/developers \n"
			printf "%b" "$YLWBAR \n"
			printf "%b" "$BLUBAR and then use it like so: \n"
			printf "%b" "$PURBAR \n"
			printf "%b" "$CYNBAR new-roses -a YOUR_API_KEY\n"
		fi
	fi
}

save() {
	savedir="$1"
	savename="$(cat $unsplashartistfile)"
	echo "${savename// /}"
	savefile="$savedir/"${savename// /}""
	if [[ -e $savefile.png ]] ; then
	    i=2
	    while [[ -e $savefile$i.png ]] 
		do
	        (( i++ ))
	    done
	    savefile=$savefile$i
	fi
	cp "$wallpaper" "$savefile.png" &&
	echo "$savefile.png saved" &
	if [[ "$notifyon" ]]
	then
		notify-send -m "$savefile.png saved" -i "$savefile.png"	
	fi
}

help() { printf "%s" "\
Usage: new-roses [OPTION] [SEARCHTERM]
       [-u] [-c] [-b 'color'] [-l] [-w] [-s 'searchterm']
       [-d '/download/dir'] [-q] [-n] [-x] [-h]
       
Example: new-roses spring
         new-roses -b 222222 coffee
	 new-roses -wnq
	 
Optional arguments:
  -a 'your_api_key'       Tell new-roses API key (creates config file).
  -u                      Grab palette from wallpaper instead of Colorlovers.com 
  -c                      Apply color palette only.
  -b 222222               Background color.
  -l                      Use light color palette.
  -w                      Skip setting color palette.
  -s 'searchterm'         Use search term (if an argument with no flags is provided
                          it will also be treated as a search term)
  -d '/path/to/dir/'	  Save wallpaper to directory.
  -q                      Quiet mode, don't print anything.
  -n                      Notify when finished (requires notify-send).
  -x                      Print all variables (test yr API connnection).
  -h                      Display this help page and exit."
}

flags() {
	while getopts a:ucb:lws:d:qnxh opt; do
		case $opt in
			a)
			createconfig "$OPTARG"
			exit
			;;
			u)
			unsplashon="true"
			;;
			c)
			colorloverson="true"
			;;
			b)
			background="-b $OPTARG"
			;;
			l)
			lightmode="-l --saturate 0.3"
			;;
			w)
			wallpaperonly="true"
			;;
			s)
			keyword="$OPTARG"
			searchon="true"
			;;
			d)
			save "$OPTARG"
			exit
			;;
			q)
			quietmodeon="true"
			;;
			n)
			notifyon="true"
			;;
			x)
			variableson="true"
			;;
			h)
			help
			exit
			;;
			*)
			help
			exit
			;;
		esac
	done
	# if no flags are provided do `new-roses [searchterm] [bgcolor]`
	shift "$((OPTIND-1))" 
	if [ "$1" != "-*" ] && [ "$1" ] ;
	then
		if [ -f "$1" ] ; then
			echo $(basename $1) | sed "s/\..*//" > "$unsplashartistfile"
			wallpaperfile="$1"
		else
			defaults "$1"
		fi
	else
		defaults "$defaultkeyword"
	fi
}

if [ "$#" -ne 0 ]; then
	getconfig
	flags "$@"
	setup
	getapi
	rmcache
	setwal
	setwallpaper
	executeafter
	notify
	credits
else
	getconfig
	setup
	defaults "$defaultkeyword"
	getapi
	rmcache
	setwal
	setwallpaper
	executeafter
	notify
	credits
fi

################
#    TO DO     #
################

# defaultbgcolor breaks -l

# stop using `wallpaper` to set wallpaper
# (pretty much finished, just need to unset $wallpapermethod if empty
# and make macos change more than one workspace

# possibly move unsplash functionality to own program

# grab actual hex codes and create .json file like:
#echo '{"foo": "lorem", "special": {"background": "#333333"}, "bar": "ipsum"}' | jq . > /tmp/jqtest
