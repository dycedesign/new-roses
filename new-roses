#!/usr/bin/env bash
#
# author: daniel neemann (@zzzeyez)
#
# sets wallpaper or `wal` colorscheme
# from unsplash.com images
# or colorlovers.com palettes
#
# requires `wal`, `imagemagick` and `jq`

# requires API key from https://unsplash.com/developers
source "${HOME}/.config/api_keys"
#unsplashapi="YOUR_KEY_HERE"

# where temporary files will be stored
cache="${HOME}/.cache/new-roses"

# default search keyword and background color
# (this is ran if no arguments are provided)
defaultkeyword="spring"
defaultbgcolor="222222"

wallpaper="$cache/wallpaper.png"
colorloversbadge="$cache/colorloversbadge.png"
colorloverswal="$cache/wal.png"
unsplashartistfile="$cache/wallpaperartist"
lightmode=""
background=""

# check for API key and cache dir
setup() {
	# if no arguments are given then run `unsplash` and `colorlovers`
	if [ -z "$unsplashon" ] && [ -z "$colorloverson" ] && [ -z "$savefile" ]
	then
		unsplashon="true"
		colorloverson="true"
	fi
	# if no background color is supplied, do default
	if [[ -z $background ]] && [[ -z $lightmode ]] && [[ -z $wallpaperonly ]] 
	then
		background="-b $defaultbgcolor"
	fi
	if [[ $unsplashon ]]
		then
		if [[ -z "$unsplashapi" ]]
		then
			unset unsplashon
			apimissing="true"
		fi
	fi	
	if [ ! -d "$cache" ]
	then
		mkdir "$cache"
		touch "$unsplashartistfile"
	fi
}

# remove `wal` cache
rmcache() {
	if [[ -z $wallpaperonly ]]
	then
		walcache="${cache////_}"
		walcache="${HOME}/.cache/wal/schemes/${walcache//./_}"
		rm -rf "$walcache"*
	fi
}

defaults() {
	keyword="$1"
	searchon="true"
	background="-b $defaultbgcolor"
}

# fetch json data
getapi() {
	# grab a random number to select from top results
	entry="$((RANDOM%20))"
	# this performs the same regardless of if search is on or not
	if [[ $colorloverson ]]
	then
		if [[ -z $wallpaperonly ]]
		then
			# grab json for colorlovers
			colorloversurl="http://www.colourlovers.com/api/palettes/top&format=json&numResults=20&keywords=$keyword"
			colorloversjson=$(curl -s "$colorloversurl")
			colorloversimage=$(echo "$colorloversjson" | jq ".[$entry] | .imageUrl" | tr -d '"')	
			colorloversusername=$(echo "$colorloversjson" | jq ".[$entry] | .userName" | tr -d '"')
			colorloverstitle=$(echo "$colorloversjson" | jq ".[$entry] | .title" | tr -d '"')
		fi
	fi
	if [[ $unsplashon ]]
	then
		if [[ $searchon ]]
		then
			unsplashurl="https://api.unsplash.com/search/photos?client_id=$unsplashapi&query=$keyword&per_page=20"
			searchjson=$(curl -s "$unsplashurl")
			image="$(echo "$searchjson" | \
			jq "{results} | .[] | .[$entry] | {urls} | .[] | {raw} | .[]" | tr -d '"')&w=1400&dpi=2"
			username="$(echo "$searchjson" | \
			jq ".results | .[$entry] .user .name" | tr -d '"')"
			userscreenname="$(echo "$searchjson" | \
			jq ".results | .[$entry] .user .username" | tr -d '"')"
			userurl="$(echo "$searchjson" | \
			jq ".results | .[$entry] .user .links .html" | tr -d '"')?utm_source=new-roses&utm_medium=referral"
			photourl="$(echo "$searchjson" | \
			jq ".results | .[$entry] .links .html" | tr -d '"')?utm_source=new-roses&utm_medium=referral"
		else
			unsplashurl="https://api.unsplash.com/photos?client_id=$unsplashapi&featured&per_page=20"
			featuredjson=$(curl -s "$unsplashurl")
			image="$(echo "$featuredjson" | \
			jq ".[$entry] | .urls | .full" | tr -d '"')"
			username="$(echo "$featuredjson" | \
			jq ".[$entry] .user .name" | tr -d '"')"
			userscreenname="$(echo "$featuredjson" | \
			jq ".[$entry] .user .username" | tr -d '"')"
			userurl="$(echo "$featuredjson" | \
			jq ".[$entry] .user .links .html" | tr -d '"')?utm_source=new-roses&utm_medium=referral"
			photourl="$(echo "$featuredjson" | \
			jq ".[$entry] .links .html" | tr -d '"')?utm_source=new-roses&utm_medium=referral"
		fi
	fi
}

# set wallpaper and/or color palette
setwal() {
	if [[ $colorloverson ]]
	then
		if [[ -z $wallpaperonly ]]
		then
			# make palette more dynamic by adding a gradient to `wal` source image
			convert "$colorloversimage" "$colorloversbadge"
			convert -size 228x161 gradient: /tmp/gradient.png
			composite /tmp/gradient.png -compose Soft_light "$colorloversbadge" "$colorloverswal"
			# apply `wal`
			wal -i "$colorloverswal" -q -n $background $lightmode 
		fi
	fi
	if [[ $unsplashon ]]
	then
		if [[ $wallpaperonly ]] || [[ $colorloverson ]]
		then
			convert "$image" "$wallpaper" &&
			wallpaper "$wallpaper"
		else
			convert "$image" "$wallpaper" &&
			wal -i "$wallpaper" -o wal-set -q $background $lightmode
		fi
	fi
}

notify() {
	if [[ $notifyon ]]
	then
		if [[ $colorloverson ]]
		then
			if [[ $unsplashon ]]
			then
				notify-send -i "$wallpaper" -m "photo by $username ($userscreenname)"
			else
				notify-send -m "color palette: $colorloverstitle by $colorloversusername"
			fi
		else
			if [[ $unsplashon ]]
			then
				notify-send -i "$wallpaper" -m "photo by $username ($userscreenname)"
			fi
		fi
	fi
}

credits() {
	if [[ -z $quietmodeon ]] 
	then
		# build the color bars
		BAR="███" && RST="\e[0m"
		RED="\e[31m" && REDBAR="$RED$BAR$RST"
		GRN="\e[32m" && GRNBAR="$GRN$BAR$RST"
		YLW="\e[33m" && YLWBAR="$YLW$BAR$RST"
		BLU="\e[34m" && BLUBAR="$BLU$BAR$RST"
		PUR="\e[35m" && PURBAR="$PUR$BAR$RST" 
		CYN="\e[36m" && CYNBAR="$CYN$BAR$RST"
		if [[ $unsplashon ]] && [[ -z $apimissing ]]
		then
			printf "%b" "$REDBAR wallpaper set as: \n"
			printf "%b" "$GRNBAR $photourl \n"
			printf "%b" "$YLWBAR photo by $username ($userscreenname) \n"
			printf "%b" "$BLUBAR $userurl \n"
			printf "%b" "$PURBAR photo supplied by https://unsplash.com/ \n"
		fi
		if [[ $colorloverson ]] && [[ -z $apimissing ]]
		then
			printf "%b" "$REDBAR color palette set as: \n"
			printf "%b" "$GRNBAR $colorloverstitle by $colorloversusername \n"
			printf "%b" "$YLWBAR courtesy of colorlovers.com\n"
		fi
		if [[ $variableson ]]
		then
			printf "%b" "$REDBAR image url: $image \n"
			printf "%b" "$GRNBAR unsplash api key: $unsplashapi \n"
			printf "%b" "$YLWBAR unsplash api url: $unsplashurl \n"
			printf "%b" "$BLUBAR search keyword: $keyword \n"
			printf "%b" "$PURBAR entry number: $entry \n"
			printf "%b" "$CYNBAR photo page: $photourl \n"
			printf "%b" "$PURBAR author: $username ( $userscreenname ) \n"
			printf "%b" "$BLUBAR author's profile: $userurl \n"
			printf "%b" "$YLWBAR photo supplied by https://unsplash.com/ \n"
			printf "%b" "$GRNBAR colorlovers api url: $colorloversurl \n"
			printf "%b" "$REDBAR colorlovers image url: $colorloversimage \n"
			printf "%b" "$GRNBAR colorlovers title: $colorloverstitle \n"
		fi
		if [[ $apimissing ]]
		then
			printf "%b" "$REDBAR wallpaper functions require API key: \n"
			printf "%b" "$GRNBAR https://unsplash.com/developers \n"
			printf "%b" "$YLWBAR \n"
			printf "%b" "$BLUBAR and then use it like so: \n"
			printf "%b" "$PURBAR \n"
			printf "%b" "$CYNBAR touch \"\${HOME}/.config/api_keys\"\n"
			printf "%b" "$PURBAR echo \"unsplashapi=YOUR_API_KEY\" > \"\${HOME}/.config/api_keys\" \n"
			printf "%b" "$BLUBAR \n"
			printf "%b" "$YLWBAR or you can manually edit it into the top of new-roses \n"
		fi
	fi
}

save() {
	savedir="$1"
	savename=$(cat "$unsplashartistfile")
	savefile="$savedir/$savename"
	if [[ -e $savefile.png ]] ; then
	    i=0
	    while [[ -e $savefile-$i.png ]] 
		do
	        (( i++ ))
	    done
	    savefile=$savefile-$i
	fi
	cp "$wallpaper" "$savefile.png" &&
	echo "$savefile.png saved" &
	if [[ "$notifyon" ]]
	then
		notify-send -m "$savefile.png saved" -i "$savefile.png"	
	fi
}

help() { printf "%s" "\
Usage: new-roses [OPTION] [SEARCHTERM]
       [-u] [-c] [-b 'color'] [-l] [-w] [-s 'searchterm']
       [-d '/download/dir'] [-q] [-n] [-x] [-h]
       
Example: new-roses spring
         new-roses -b 222222 coffee
	 new-roses -wnq
	 
Optional arguments:
  -u                      Apply wallpaper and color palette from Unsplash.com
  -c                      Apply color palette from Colorlovers.com
  -b 222222               Load colors directly from a colorscheme file.
  -l                      Use light color palette.
  -w			  Skip setting color palette.
  -s 'searchterm'         Use search term (if an argument with no flags is provided
			  it will be treated as a search term)
  -d '/path/to/dir/'	  Save wallpaper to directory.
  -q                      Quiet mode, don't print anything.
  -n			  Notify when finished (requires notify-send).
  -x                      Print all variables (test yr API connnection).
  -h			  Display this help page and exit.
"
}

flags() {
	while getopts ucb:lws:d:qnxh opt; do
		case $opt in
			u)
			unsplashon="true"
			;;
			c)
			colorloverson="true"
			;;
			b)
			background="-b $OPTARG"
			;;
			l)
			lightmode="-l"
			;;
			w)
			wallpaperonly="true"
			unsplashon="true"
			;;
			s)
			keyword="$OPTARG"
			searchon="true"
			;;
			d)
			save "$OPTARG"
			exit
			;;
			q)
			quietmodeon="true"
			;;
			n)
			notifyon="true"
			;;
			x)
			variableson="true"
			;;
			h)
			help
			exit
			;;
			*)
			help
			exit
			;;
		esac
	done
	# if no flags are provided do `new-roses [searchterm] [bgcolor]`
	shift "$((OPTIND-1))" 
	if [ "$1" != "-*" ] && [ "$1" ] ;
	then
		defaults "$1"
	fi
}

if [ "$#" -ne 0 ]; then
	flags "$@"
	setup
	getapi
	rmcache
	setwal
	notify
	credits
else
	setup
	getapi
	defaults "$defaultkeyword"
	rmcache
	setwal
	notify
	credits
fi

################
#    TO DO     #
################

# stop using `wallpaper` to set wallpaper
# (maybe just do `wal -ts`)
