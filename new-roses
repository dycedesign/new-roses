#!/usr/bin/env bash
#
# author: daniel neemann (@zzzeyez)
#
# sets wallpaper or `wal` colorscheme
# from unsplash.com images
# or colorlovers.com palettes
#
# requires `wal`, `imagemagick` and `jq`

# requires API key from https://unsplash.com/developers
source "${HOME}/.config/api_keys"
#unsplashapi="YOUR_KEY_HERE"

# where temporary files will be stored
cache="${HOME}/.cache/new-roses"

# default search keyword and background color
# (this is ran if no arguments are provided)
defaultkeyword="spring"
defaultbgcolor="222222"

wallpaper="$cache/wallpaper.png"
colorloversbadge="$cache/colorloversbadge.png"
colorloverswal="$cache/wal.png"
unsplashartistfile="$cache/wallpaperartist"
lightmode=""
background=""

# check for API key and cache dir
setup() {
	# if no arguments are given then run `unsplash` and `colorlovers`
	if [ -z "$unsplashon" ] && [ -z "$colorloverson" ] && [ -z "$savefile" ]
	then
		unsplashon="true"
		colorloverson="true"
	fi
	if [[ $unsplashon ]]
		then
		if [[ -z $unsplashapi ]]
		then
			unset unsplashon
			apimissing="true"
		fi
	fi	
	if [ ! -d $cache ]
	then
		mkdir "$cache"
		touch "$unsplashartistfile"
	fi
	# grab a random number to select from top results
	entry="$((RANDOM%20))"
	# delete `wal` cache
	walcache="${cache////_}"
	walcache="${HOME}/.cache/wal/schemes/${walcache//./_}"
	rm -rf "$walcache"*
}

# fetch json data
getapi() {
	# this performs the same regardless of if search is on or not
	if [[ $colorloverson ]]
	then
		if [[ -z $wallpaperonly ]]
		then
			# grab json for colorlovers
			colorloversurl="http://www.colourlovers.com/api/palettes/top&format=json&numResults=20&keywords=$keyword"
			colorloversjson=$(curl -s "$colorloversurl")
			colorloversimage=$(echo "$colorloversjson" | jq ".[$entry] | .imageUrl" | tr -d '"')	
			colorloversusername=$(echo "$colorloversjson" | jq ".[$entry] | .userName" | tr -d '"')
			colorloverstitle=$(echo "$colorloversjson" | jq ".[$entry] | .title" | tr -d '"')
		fi
	fi
	if [[ $unsplashon ]]
	then
		# no need to use `wal` if we're getting the palette from colorlovers
		if [[ $colorloverson ]]
		then
			wallpaperonly="true"
		fi
		# grab json for search or featured
		if [[ $searchon ]]
		then
			unsplashurl="https://api.unsplash.com/search/photos?client_id=$unsplashapi&query=$keyword&per_page=20"
			searchjson=$(curl -s "$unsplashurl")
			image="$(echo "$searchjson" | \
				jq "{results} | .[] | .[$entry] | {urls} | .[] | {raw} | .[]" | tr -d '"')&w=1400&dpi=2"
			username="$(echo "$searchjson" | \
				jq ".results | .[$entry] .user .name" | tr -d '"')"
			userscreenname="$(echo "$searchjson" | \
				jq ".results | .[$entry] .user .username" | tr -d '"')"
			userurl="$(echo "$searchjson" | \
				jq ".results | .[$entry] .user .links .self" | tr -d '"')?utm_source=new-roses&utm_medium=referral"
			photourl="$(echo "$searchjson" | \
				jq ".results | .[$entry] .links .html" | tr -d '"')?utm_source=new-roses&utm_medium=referral"
		else
			unsplashurl="https://api.unsplash.com/photos?client_id=$unsplashapi&featured&per_page=20"
			featuredjson=$(curl -s "$unsplashurl")
			image="$(echo "$featuredjson" | \
				jq ".[$entry] | .urls | .full" | tr -d '"')"
			username="$(echo "$featuredjson" | \
				jq ".[$entry] .user .name" | tr -d '"')"
			userscreenname="$(echo "$featuredjson" | \
				jq ".[$entry] .user .username" | tr -d '"')"
			userurl="$(echo "$featuredjson" | \
				jq ".[$entry] .user .links .self" | tr -d '"')?utm_source=new-roses&utm_medium=referral"
			photourl="$(echo "$featuredjson" | \
				jq ".[$entry] .links .html" | tr -d '"')?utm_source=new-roses&utm_medium=referral"
		fi
	fi
}

# set wallpaper and/or color palette
setwal() {
	if [[ $colorloverson ]]
	then
		if [[ -z $wallpaperonly ]]
		then
			# make palette more dynamic by adding a gradient to `wal` source image
			convert "$colorloversimage" "$colorloversbadge"
			convert -size 228x161 gradient: /tmp/gradient.png
			composite /tmp/gradient.png -compose Soft_light "$colorloversbadge" "$colorloverswal"
			# apply `wal`
			wal -i "$colorloverswal" -q -n $background $lightmode 
		fi
	fi
	if [[ $unsplashon ]]
	then
		if [[ -z $wallpaperonly ]]
		then
			convert "$image" "$wallpaper" &&
			wal -i "$wallpaper" -o wal-set -q $background $lightmode
		else
			convert "$image" "$wallpaper" &&
			wallpaper "$wallpaper"	
		fi
	fi
}

notify() {
	if [[ $notifyon ]]
	then
		if [[ $colorloverson ]]
		then
			if [[ $unsplashon ]]
			then
				notify-send -i "$wallpaper" -m "photo by $username ($userscreenname)"
			else
				notify-send -m "color palette: $colorloverstitle by $colorloversusername"
			fi
		else
			if [[ $unsplashon ]]
			then
				notify-send -i "$wallpaper" -m "photo by $username ($userscreenname)"
			fi
		fi
	fi
}

credits() {
	if [[ -z $quietmodeon ]] 
	then
		# color escapes
		BLK="\e[30m"
		RED="\e[31m"
		GRN="\e[32m"
		YLW="\e[33m"
		BLU="\e[34m"
		PUR="\e[35m"
		CYN="\e[36m"
		RST="\e[0m"
		# build the color bars
		BAR="███"
		REDBAR="$RED$BAR$RST"
		GRNBAR="$GRN$BAR$RST"
		YLWBAR="$YLW$BAR$RST"
		BLUBAR="$BLU$BAR$RST"
		PURBAR="$PUR$BAR$RST" 
		CYNBAR="$CYN$BAR$RST"
		if [[ $unsplashon ]]
		then
			printf "$REDBAR " && echo "wallpaper set as:"
			printf "$GRNBAR " && echo "$photourl"
			printf "$YLWBAR " && echo "photo by $username ($userscreenname)"
			printf "$BLUBAR " && echo "$userurl"
			printf "$PURBAR " && echo "photo supplied by https://unsplash.com/"
		fi
		if [[ $colorloverson ]]
		then
			printf "$REDBAR " && echo "color palette set as:"
			printf "$GRNBAR " && echo "$colorloverstitle by $colorloversusername"
			printf "$YLWBAR " && echo "courtesy of colorlovers.com"
		fi
		if [[ $variableson ]]
		then
			echo "image url: $image"
			echo "unsplash api key: $unsplashapi"
			echo "unsplash api url: $unsplashurl"
			echo "search keyword: $keyword"
			echo "entry number: $entry"
			echo "photo page: $photourl"
			echo "author: $username ( $userscreenname )"
			echo "author's profile: $userurl"
			echo "photo supplied by https://unsplash.com/"
			echo "colorlovers api url: $colorloversurl"
			echo "colorlovers image url: $colorloversimage"
			echo "colorlovers title: $colorloverstitle"
		fi
		if [[ $apimissing ]]
		then
			printf "REQUIREMENT: GET YOUR OWN API KEY AT: \n"
			printf "https://unsplash.com/developers \n \n"
			printf "and then use it like so: \n \n"
			printf "touch \"\${HOME}/.config/api_keys\" \n"
			printf "echo \"unsplashapi=YOUR_API_KEY\" > \"${HOME}/.config/api_keys\""
		fi
	fi
}

save() {
	savedir="$1"
	savename=$(cat $unsplashartistfile)
	savefile="$savedir/$savename"
	if [[ -e $savefile.png ]] ; then
	    i=0
	    while [[ -e $savefile-$i.png ]] 
		do
	        let i++
	    done
	    savefile=$savefile-$i
	fi
	cp "$wallpaper" "$savefile.png" &&
	echo "$savefile.png saved" &
	if [[ "$notifyon" ]]
	then
		notify-send -m "$savefile.png saved" -i "$savefile.png"	
	fi
}

help() { printf "%s" "\
Usage: new-roses [OPTION] [SEARCHTERM]
       [-u] [-c] [-b 'color'] [-l] [-w] [-s 'searchterm']
       [-d '/download/dir'] [-q] [-n] [-x] [-h]
       
Example: new-roses spring
         new-roses -b 222222 coffee
	 
Optional arguments:
  -u                      Apply wallpaper and color palette from Unsplash.com
  -c                      Apply color palette from Colorlovers.com
  -b 222222               Load colors directly from a colorscheme file.
  -l                      Use light color palette.
  -w			  Skip setting color palette.
  -s 'searchterm'         Use search term (if an argument with no flags is provided
			  it will be treated as a search term)
  -d '/path/to/dir/'	  Save wallpaper to directory.
  -q                      Quiet mode, don't print anything.
  -n			  Notify when finished (requires `notify-send`).
  -x                      Print all variables (test yr API connnection).
  -h			  Display this help page and exit.
"
}

flags() {
	while getopts ucb:lws:d:qnxh opt; do
		case $opt in
			u)
			unsplashon="true"
			;;
			c)
			colorloverson="true"
			;;
			b)
			background="-b $OPTARG"
			;;
			l)
			lightmode="-l"
			;;
			w)
			wallpaperonly="true"
			unsplashon="true"
			;;
			s)
			keyword="$OPTARG"
			searchon="true"
			;;
			q)
			quietmodeon="true"
			;;
			n)
			notifyon="true"
			;;
			d)
			save "$OPTARG"
			exit
			;;
			x)
			variableson="true"
			;;
			h)
			help
			exit
			;;
			*)
			help
			exit
			;;
		esac
	done
	shift "$((OPTIND-1))" 
	if [ "$1" != "-*" ] && [ "$1" ] ;
	then
		keyword="$1"
		searchon="true"
		background="-b $defaultbgcolor"
	fi
}

if [ "$#" -ne 0 ]; then
	flags "$@"
	setup
	getapi
	setwal
	notify
	credits
else
	setup
	getapi
	keyword="$defaultkeyword"
	searchon="true"
	background="-b $defaultbgcolor"
	setwal
	notify
	credits
fi

################
#    TO DO     #
################

# stop using `wallpaper` to set wallpaper
# (maybe just do `wal -ts`)
